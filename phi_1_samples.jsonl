{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('')\n        elif char == ')':\n            if stack:\n                result.append(stack.pop() + char)\n            else:\n                result.append(char)\n        elif char =='':\n            continue\n        else:\n            stack[-1] += char\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/10", "completion": "    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/100", "completion": "    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [2*n] + make_a_pile(n-1)\n    else:\n        return [n] + make_a_pile(n-1)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/101", "completion": "    return s.split(\", \") if \",\" in s else s.split()\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/102", "completion": "    if x % 2 == 0:\n        x += 1\n    if y % 2 == 0:\n        y -= 1\n    if x > y:\n        return -1\n    return x + (y - x) // 2 * 2\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        return bin(round(avg))[2:]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/104", "completion": "    unique = []\n    for num in x:\n        digits = set(str(num))\n        if all(int(digit) % 2!= 0 for digit in digits):\n            unique.append(num)\n    return sorted(unique)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/105", "completion": "    # Filter out numbers outside the range 1-9\n    arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the remaining numbers\n    arr.sort(reverse=True)\n    \n    # Replace each digit with its corresponding name\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [digit_names[num-1] for num in arr]\n    \n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/106", "completion": "    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/107", "completion": "    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            num = str(i) + str(j)\n            if num == num[::-1] and int(num) % 2 == 0:\n                count_even += 1\n            elif int(num) % 2 == 1:\n                count_odd += 1\n    return (count_even, count_odd)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/108", "completion": "    count = 0\n    for num in arr:\n        if num >= 0:\n            continue\n        first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n        if first_digit % 2 == 0:\n            first_digit -= 1\n        if sum(int(digit) for digit in str(first_digit)) > 0:\n            count += 1\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/109", "completion": "    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            if i+2 <= n and arr[i+1] < arr[i+2]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n            else:\n                return False\n    return True\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/11", "completion": "    # Convert input strings to lists of integers\n    a_list = [int(i) for i in a]\n    b_list = [int(i) for i in b]\n    \n    # Perform binary XOR on the input lists\n    result = [a_list[i] ^ b_list[i] for i in range(len(a_list))]\n    \n    # Convert result list back to string and return\n    return ''.join([str(i) for i in result])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/110", "completion": "    # Count the number of even and odd numbers in lst1 and lst2\n    even_count = 0\n    odd_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    for num in lst2:\n        if num % 2 == 0:\n            even_count -= 1\n        else:\n            odd_count -= 1\n    # If the number of even and odd numbers is the same, return \"YES\"\n    if even_count == 0 and odd_count == 0:\n        return \"YES\"\n    # Otherwise, return \"NO\"\n    else:\n        return \"NO\"\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/111", "completion": "    if not test:\n        return {}\n\n    # Split the string into a list of individual letters\n    letters = test.split()\n\n    # Count the occurrence of each letter\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n\n    # Find the maximum count\n    max_count = max(counts.values())\n\n    # Create a dictionary of the letters with the maximum count\n    result = {}\n    for letter, count in counts.items():\n        if count == max_count:\n            result[letter] = count\n\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/112", "completion": "    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result + result[::-1], result == result[::-1])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/113", "completion": "    output = []\n    for s in lst:\n        odd_count = 0\n        for c in s:\n            if int(c) % 2 == 1:\n                odd_count += 1\n        output.append(f\"the number of odd elements {odd_count} the str{s}ng {odd_count} of the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n the {odd_count}n"}
{"task_id": "HumanEval/114", "completion": "    if not nums:\n        return 0\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        curr_sum = max(curr_sum, 0)\n    return min_sum\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/115", "completion": "    rows, cols = len(grid), len(grid[0])\n    \n    # Calculate the number of buckets needed to hold all the wells\n    num_buckets = math.ceil(sum(sum(row) for row in grid))\n    \n    # Calculate the maximum number of times you can lower the buckets\n    max_lower = math.ceil(num_buckets / capacity)\n    \n    return max_lower * (num_buckets // capacity)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/116", "completion": "    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/117", "completion": "    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for letter in word if letter.lower() not in \"aeiou\")\n        if consonants == n:\n            result.append(word)\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/118", "completion": "    vowels = set(\"aeiouAEIOU\")\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):\n                if word[j] not in vowels:\n                    return word[j]\n            return \"\"\n    return \"\"\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/119", "completion": "    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n        if stack:\n            return 'No'\n    return 'Yes'\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/120", "completion": "    arr.sort(reverse=True)\n    return arr[:k]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/121", "completion": "    return sum(lst[::2])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/122", "completion": "    total = 0\n    for i in range(k):\n        for j in range(i+1, k):\n            if len(str(arr[i])) <= 2 and len(str(arr[j])) <= 2:\n                total += arr[i] + arr[j]\n    return total\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/123", "completion": "    collatz_seq = [n]\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted([x for x in collatz_seq if x % 2!= 0])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/124", "completion": "    months = {'01': 31, '03': 31, '05': 31, '07': 31, '08': 31, '10': 31, '12': 31}\n    days = {'01': 31, '03': 31, '05': 31, '07': 31, '08': 31, '10': 31, '12': 31}\n    months_list = ['01', '03', '05', '07', '08', '10', '12']\n    for month in months:\n        if month not in months_list:\n            return False\n    for day in days:\n        if day not in days[month]:\n            return False\n    if int(date.split('-')[0]) not in range(1, 13) or int(date.split('-')[1]) not in range(1, 32) or int(date.split('-')[2]) not in range(2000, 2040):\n        return False\n    return True\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/125", "completion": "    if'' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        lower_odd_letters = [chr(i) for i in range(ord('a'), ord('z')+1) if i % 2!= 0]\n        lower_even_letters = [chr(i) for i in range(ord('a'), ord('z')+1) if i % 2 == 0]\n        lower_odd_count = sum([1 for letter in lower_odd_letters if letter in txt])\n        even_count = sum([1 for letter in lower_even_letters if letter in txt])\n        return [txt, lower_odd_count + even_count]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/126", "completion": "    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/127", "completion": "    # YOUR CODE HERE\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n    pos_prod = 1\n    neg_prod = 1\n    for num in arr:\n        if num > 0:\n            pos_prod *= 1\n        elif num < 0:\n            neg_prod *= -1\n    return sum(abs(num) for num in arr) * pos_prod * neg_prod\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/129", "completion": "    def dfs(curr, visited, path, res):\n        if len(path) == k:\n            res.append(path[:])\n            return\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = curr[0] + dr, curr[1] + dc\n            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (nr, nc) not in visited:\n                visited.add((nr, nc))\n                path.append(grid[nr][nc])\n                dfs((nr, nc), visited, path, res)\n                path.pop()\n                visited.remove((nr, nc))\n\n    res = []\n    dfs((0, 0), set(), [], res)\n    return res[0]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append(result[i // 2 - 1] + result[i // 2 - 2] + result[i // 2 - 3])\n            else:\n                result.append(result[i // 2] + result[i // 2 - 1] + result[i // 2 - 2])\n        return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/132", "completion": "    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/133", "completion": "    return sum([int(num)**2 for num in lst])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/134", "completion": "    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and not last_char.isalpha() in txt[:-1]:\n        return True\n    else:\n        return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/135", "completion": "    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/136", "completion": "    neg = None\n    pos = None\n    for num in lst:\n        if num < 0 and (neg is None or num > neg):\n            neg = num\n        elif num > 0 and (pos is None or num < pos):\n            pos = num\n    return (neg, pos)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/137", "completion": "    if type(a) == type(b):\n        if isinstance(a, (int, float)):\n            return max(a, b)\n        elif isinstance(a, str):\n            if \".\" in a:\n                a = a.replace(\".\", \"\")\n            else:\n                a = a.replace(\",\", \"\")\n            if \".\" in b:\n                b = b.replace(\".\", \"\")\n            else:\n                b = b.replace(\",\", \"\")\n            if a == b:\n                return a\n            elif a > b:\n                return a\n            else:\n                return b\n    return None\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/138", "completion": "    if n < 4 or n % 2!= 0:\n        return False\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0:\n            return True\n    return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/139", "completion": "    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            prefixes.append(string[i:j])\n    return sorted(prefixes)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/140", "completion": "    fixed_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            fixed_text += \"_\"\n        elif i > 0 and text[i-1] == \" \" and text[i] == \" \":\n            fixed_text += \"-\"\n        else:\n            fixed_text += text[i]\n    return fixed_text\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/141", "completion": "    if len(file_name) > 3 or '.' in file_name:\n        return 'No'\n    if file_name.count('.') > 1:\n        return 'No'\n    if not file_name[0].isalpha() or not file_name[1:].islower():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/142", "completion": "    total = 0\n    for i in range(len(lst)):\n        if (i+1) % 3 == 0 and (i+1) % 4!= 0:\n            total += lst[i]**2\n        elif (i+1) % 4 == 0:\n            total += lst[i]**3\n        else:\n            total += lst[i]\n    return total\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/143", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/144", "completion": "    # Convert the fractions to integers\n    x_int = int(x.split('/')[0])\n    n_int = int(n.split('/')[1])\n\n    # Multiply the numerators and denominators\n    x_new = x_int * n_int\n    n_new = n_int\n\n    # Check if the result is a whole number\n    if x_new % n_new == 0:\n        return True\n    else:\n        return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/145", "completion": "    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda num: (digit_sum(num), nums.index(num)))\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/147", "completion": "    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i + j*j + k*k) % 3 == 0:\n                    count += 1\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/148", "completion": "    correct_planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in correct_planets or planet2 not in correct_planets:\n        return ()\n    orbits = {\"Mercury\": 0, \"Venus\": 0, \"Earth\": 0, \"Mars\": 0, \"Jupiter\": 0, \"Saturn\": 0, \"Uranus\": 0, \"Neptune\": 0}\n    for planet in [planet1, planet2]:\n        while True:\n            orbit = input(f\"What is the orbit of {planet}? (0-8) \")\n            if orbit.isdigit() and int(orbit) in range(0, 9):\n                orbits[planet] = int(orbit)\n                break\n            else:\n                print(\"Invalid input. Please enter a number between 0 and 8.\")\n    return tuple(sorted([planet for planet in orbits if orbits[planet] >= orbits[planet1] and orbits[planet] <= orbits[planet2]], key=lambda x: abs(orbits[x] - orbits[\"Sun\"])))\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/149", "completion": "    # Delete odd-length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort by length and then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/15", "completion": "    return''.join(str(i) for i in range(n+1))\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/150", "completion": "    if n == 2:\n        return x\n    elif n < 2 or n % 2 == 0:\n        return y\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return y\n        return x\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/151", "completion": "    return sum([(2 * (num ** 2)) for num in lst if isinstance(num, int) and num % 2!= 0])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        if guess[i] == game[i]:\n            result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/153", "completion": "    strongest_extension = \"\"\n    max_strength = -1\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(a)):\n        if b == a[i:] + a[:i]:\n            return True\n    return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/155", "completion": "    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/156", "completion": "    roman_numerals = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    roman_numeral = ''\n    for numeral, symbol in roman_numerals.items():\n        while number >= numeral:\n            roman_numeral += symbol\n            number -= numeral\n    return roman_numeral.lower()\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/157", "completion": "    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    elif sides[0]**2 + sides[1]**2 == sides[2]**2 or sides[1]**2 + sides[2]**2 == sides[0]**2:\n        return True\n    else:\n        return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/158", "completion": "    max_word = \"\"\n    max_count = 0\n    for word in words:\n        unique_chars = set(word)\n        count = len(unique_chars)\n        if count > max_count:\n            max_word = word\n            max_count = count\n        elif count == max_count and word < max_word:\n            max_word = word\n    return max_word\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/159", "completion": "    eaten = number + need\n    if eaten > remaining:\n        eaten = remaining\n    return [eaten, remaining - eaten]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/16", "completion": "    # Convert the string to lowercase to make it case-insensitive\n    string = string.lower()\n    # Create an empty set to store distinct characters\n    distinct_chars = set()\n    # Iterate over each character in the string\n    for char in string:\n        # Add the lowercase version of the character to the set\n        distinct_chars.add(char.lower())\n    # Return the length of the set\n    return len(distinct_chars)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/160", "completion": "    expression = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            expression += operand[i]\n        elif operator[i-1] == '-':\n            expression -= operand[i]\n        elif operator[i-1] == '*':\n            expression *= operand[i]\n        elif operator[i-1] == '//':\n            expression //= operand[i]\n        elif operator[i-1] == '**':\n            expression **= operand[i]\n    return expression\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/161", "completion": "    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/162", "completion": "    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/163", "completion": "    result = []\n    for num in range(a, b+1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                result.append(int(digit))\n                break\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/17", "completion": "    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) # find the next occurrence of substring\n        if start == -1: # no more occurrences found\n            break\n        count += 1\n        start += 1 # move start to the next character\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/19", "completion": "    # Convert input string to list of numbers\n    num_list = numbers.split()\n    \n    # Create dictionary mapping number strings to numbers\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Sort the list of numbers and convert back to string\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    sorted_str =''.join(sorted_nums)\n    \n    return sorted_str\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/2", "completion": "    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/20", "completion": "    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    # Initialize variables to hold the closest numbers\n    closest_smaller = sorted_numbers[0]\n    closest_larger = sorted_numbers[1]\n    # Iterate through the sorted list and update the closest numbers if a closer pair is found\n    for i in range(1, len(sorted_numbers) - 1):\n        if sorted_numbers[i+1] - sorted_numbers[i] < closest_larger - closest_smaller:\n            closest_smaller = sorted_numbers[i]\n            closest_larger = sorted_numbers[i+1]\n    return closest_smaller, closest_larger\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    return [num - min_num for num in numbers]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/22", "completion": "    return [x for x in values if isinstance(x, int)]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/23", "completion": "    return len(string)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/24", "completion": "    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/26", "completion": "    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/27", "completion": "    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/30", "completion": "    return [num for num in l if num > 0]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/32", "completion": "    n = len(xs)\n    if n % 2!= 0:\n        raise ValueError(\"List must have even number of coefficients.\")\n    for x in range(max(xs), 0, -1):\n        if poly(xs, x) == 0:\n            return x\n    raise ValueError(\"No zero point found.\")\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/33", "completion": "    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    l_third = [l[i] for i in third_indices]\n    l_third.sort()\n    result = []\n    for i in range(len(l)):\n        if i in third_indices:\n            result.append(l_third.pop(0))\n        else:\n            result.append(l[i])\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/34", "completion": "    return sorted(set(l))\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/35", "completion": "    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/37", "completion": "    even = sorted(l[::2])\n    odd = sorted(l[1::2])\n    return [even[i//2] if i%2==0 else odd[i//2] for i in range(len(l))]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/38", "completion": "    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group.\n    groups = [(groups[(i + 1) % len(groups)][2] + groups[(i + 2) % len(groups)][1] + groups[(i + 3) % len(groups)][0]) % 256 for i in range(len(groups))]\n    return \"\".join(chr(group) for group in groups)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    a, b = 0, 1\n    count = 0\n    while count < n:\n        if is_prime(b):\n            count += 1\n        a, b = b, a+b\n    return b\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/4", "completion": "    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(deviations)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/40", "completion": "    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/41", "completion": "    return n - 1\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/42", "completion": "    for i in range(len(l)):\n        l[i] += 1\n    return l\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/43", "completion": "    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/44", "completion": "    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(digits[::-1])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/45", "completion": "    return (a * h) / 2\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 2, 0, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2-1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/48", "completion": "    # Remove all non-alphanumeric characters and convert to lowercase\n    text = ''.join(c for c in text if c.isalnum()).lower()\n    # Check if the string is equal to its reverse\n    return text == text[::-1]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/49", "completion": "    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (2**n) % p\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/50", "completion": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/53", "completion": "    return x + y\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/54", "completion": "    return sorted(s0) == sorted(s1)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack and stack[-1] == \"<\":\n            stack.pop()\n        else:\n            return False\n    return not stack\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/58", "completion": "    # Convert lists to sets for faster intersection operation\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find intersection of sets\n    intersection = set1.intersection(set2)\n\n    # Convert intersection set back to list and sort\n    result = sorted(list(intersection))\n\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/59", "completion": "    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/6", "completion": "    stack = []\n    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(current_depth)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth = stack.pop()\n            max_depth = max(max_depth, current_depth)\n        elif char =='':\n            result.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n        else:\n            raise ValueError('Invalid character in input string')\n    result.append(max_depth)\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/60", "completion": "    return sum(range(1, n+1))\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/62", "completion": "    if len(xs) == 1:\n        return [0]\n    else:\n        return [xs[i] * (len(xs) - i - 1) for i in range(len(xs) - 1)]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/63", "completion": "    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b, c = 1, 1, 2\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    for i in range(len(s)):\n        if s[i] in \"aeiouAEIOU\":\n            if i == len(s)-1 or s[i+1] not in \"aeiouAEIOU\":\n                count += 1\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/66", "completion": "    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/67", "completion": "    num_apples = int(s.split()[0])\n    num_oranges = int(s.split()[2])\n    total_fruits = num_apples + num_oranges\n    mango_fruits = total_fruits - num_apples - num_oranges\n    return mango_fruits\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even_node = min(even_nodes)\n    smallest_even_node_index = arr.index(smallest_even_node)\n    return [smallest_even_node, smallest_even_node_index]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/69", "completion": "    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_val = -1\n    for num in freq:\n        if num > 0 and freq[num] >= num:\n            max_val = max(max_val, num)\n    return max_val\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/70", "completion": "    while len(lst) > 1:\n        min_index = lst.index(min(lst))\n        max_index = lst.index(max(lst))\n        lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n    return lst\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/71", "completion": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/72", "completion": "    return q == q[::-1] and sum(q) <= w\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/74", "completion": "    if len(lst1) == len(lst2):\n        return lst1\n    elif len(lst1) > len(lst2):\n        return lst1[:len(lst2)]\n    else:\n        return lst2[:len(lst1)]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/75", "completion": "    if a < 100:\n        return False\n    for i in range(2, int(a**(1/2))+1):\n        if a % i == 0:\n            return False\n    for i in range(2, int(a**(1/3))+1):\n        if a % (i**2) == 0:\n            for j in range(2, int(a**(1/2))+1):\n                if a % (i**3) == 0:\n                    return True\n    return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return x == 1\n    elif n == 0:\n        return False\n    else:\n        while x % n == 0:\n            x //= n\n        return x == 1\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/77", "completion": "    if a <= 0:\n        return False\n    cube_root = round(a**(1/3))\n    return cube_root**3 == a\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/78", "completion": "    count = 0\n    for digit in num:\n        if digit in \"2357\":\n            count += 1\n        elif digit in \"BED\":\n            count += 2\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]  # convert decimal to binary and remove '0b' prefix\n    return 'db' + binary + 'db'  # add extra characters to beginning and end of string\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/8", "completion": "    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2, 3):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade >= 3.7:\n            letter_grades.append('A+')\n        elif grade >= 3.3:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('A-')\n        elif grade >= 2.7:\n            letter_grades.append('B+')\n        elif grade >= 2.3:\n            letter_grades.append('B')\n        elif grade >= 2.0:\n            letter_grades.append('B-')\n        elif grade >= 1.7:\n            letter_grades.append('C+')\n        elif grade >= 1.3:\n            letter_grades.append('C')\n        elif grade >= 1.0:\n            letter_grades.append('C-')\n        elif grade >= 0.7:\n            letter_grades.append('D+')\n        elif grade >= 0.0:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('F')\n    return letter_grades\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/82", "completion": "    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string)**0.5)+1):\n        if len(string) % i == 0:\n            return False\n    return True\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/83", "completion": "    count = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if str(i) == '1' and str(j) == '1':\n                count += 1\n            elif str(i) == '1' and str(j) == str(j)[::-1]:\n                count += 1\n            elif str(i) == str(j)[::-1] and str(j) == '1':\n                count += 1\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/84", "completion": "    # Convert N to binary string\n    binary_str = bin(N)[2:]\n    \n    # Calculate sum of digits\n    digit_sum = sum(int(digit) for digit in binary_str)\n    \n    # Convert digit sum to binary string and return\n    return bin(digit_sum)[2:]\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/85", "completion": "    return sum(lst[1::2])\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/86", "completion": "    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return''.join(ordered_words)\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (-x[0], -x[1]))\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/88", "completion": "    sorted_array = sorted(array)\n    if sum(sorted_array[:len(sorted_array)//2]) % 2 == 0:\n        sorted_array.reverse()\n    return sorted_array\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/89", "completion": "    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted = ''\n    for letter in s:\n        if letter.lower() in alphabet:\n            index = alphabet.index(letter.lower())\n            shift = index * 2\n            if letter.isupper():\n                encrypted += rotated_alphabet[shift].upper()\n            else:\n                encrypted += rotated_alphabet[shift]\n        else:\n            encrypted += letter\n    return encrypted\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n    return result\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    second_smallest = min(lst)\n    return second_smallest\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/91", "completion": "    count = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n            count += 1\n    for sentence in S.split('?'):\n        if sentence.strip().startswith('I'):\n            count += 1\n    for sentence in S.split('!'):\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x + y == z or x + z == y or y + z == x:\n            return True\n    return False\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/93", "completion": "    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            if letter.isupper():\n                encoded_message += letter.lower()\n            else:\n                encoded_message += letter.upper()\n        else:\n            encoded_message += letter\n    \n    for i in range(len(encoded_message)):\n        if encoded_message[i] in vowels:\n            encoded_index = (vowels.index(encoded_message[i]) + 2) % 5\n            encoded_message = encoded_message[:i] + encoded_message[i].upper() + encoded_message[i+1:encoded_index] + encoded_message[encoded_index].upper() + encoded_message[encoded_index+1:]\n            break\n    \n    return encoded_message\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    digit_sum = 0\n    for num in lst:\n        if num == largest_prime:\n            for digit in str(num):\n                digit_sum += int(digit)\n\n    return digit_sum\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return True\n    keys = list(dict.keys())\n    for key in keys:\n        if isinstance(key, str):\n            if key.islower() or key.isupper():\n                continue\n            else:\n                return False\n        else:\n            return False\n    return True\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/96", "completion": "    if n < 2:\n        return []\n    primes = [2]\n    for i in range(3, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/97", "completion": "    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n\n\n\nfrom typing import List\n"}
{"task_id": "HumanEval/99", "completion": "    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)\n\n\n\nfrom typing import List\n"}
